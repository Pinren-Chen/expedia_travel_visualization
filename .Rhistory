table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 10)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 10)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Purples',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
p
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Purples',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
p
p
state.df<-data.frame(long=data_booking$srch_destination_longitude,lat=data_booking$srch_destination_latitude,name=data_booking$srch_destination_name)
View(state.df)
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
#p
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds'
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
#p
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
#p
p
table.state.num<- table(data_booking$user_location_region)
#convert the table to dataframe
state.df<-data.frame(state=names(table.state.num),num<-unname(table.state.num))
# specify map's notes
state.df$hover <- with(state.df, paste(state, '<br>', "numbers of record:", num))
# give state boundaries a white border
l <- list(color = toRGB("black"), width = 1)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,  #whether show the lake
lakecolor = toRGB('blue')  #lake's color
)
#specify map's features
p <- plot_geo(state.df, locationmode = 'USA-states') %>%
add_trace(
z = ~num, text = ~hover, locations = ~state,
color = ~num, colors = 'Reds',marker=list(line=l)
) %>%
colorbar(title = "booked") %>%
layout(
title = 'Expedia records by State<br>(Hover for breakdown)',
geo = g
)
#p
p
state.df<-data.frame(long=data_booking$srch_destination_longitude,lat=data_booking$srch_destination_latitude,name=data_booking$srch_destination_name)
#head(state.df)
state.df1<-cbind(state.df,rep(1,nrow(state.df)))
#head(state.df1)
state.df1$long<-as.factor(state.df1$long)
state.df1$lat<-as.factor(state.df1$lat)
state.df1$name<-as.factor(state.df1$name)
agg.list <- list(state.df1$long, state.df1$lat,state.df1$name)
state.count<-aggregate(state.df1[,4], by = agg.list, sum)
head(state.count)
colnames(state.count)
state.df<-data.frame(long=data_booking$srch_destination_longitude,lat=data_booking$srch_destination_latitude,name=data_booking$srch_destination_name)
state.df1<-cbind(state.df,rep(1,nrow(state.df)))
View(state.df)
View(state.df1)
agg.list
table(data_booking$srch_destination_id)
table(data_booking$srch_destination_name)
table.state.count2=table(data_booking$srch_destination_name)
statem.df2=data.frame(destination=data_booking$srch_destination_name,unname(table.state.count2))
length(unname(table.state.count2))
length(data_booking$srch_destination_name)
statem.df2=data.frame(destination=as.factor(data_booking$srch_destination_name),unname(table.state.count2))
statem.df2=data.frame(destination=unique(data_booking$srch_destination_name),unname(table.state.count2))
View(statem.df2)
View(data_booking)
statem.df2=merge(statem.df2,data_booking[,c(1,)],by.x = destination,by.y = srch_destination_id,all.x = TRUE)
ncol(data_booking)
statem.df2=merge(statem.df2,data_booking[,c(1,15,16)],by.x = destination,by.y = srch_destination_id,all.x = TRUE)
statem.df2=merge(statem.df2,data_booking[,c(1,15,16)],by.x = "destination",by.y = "srch_destination_id",all.x = TRUE)
View(statem.df2)
data_booking[,c(1,15,16)]
statem.df2[,c("Var1","Freq")]
statem.df2=merge(statem.df2,data_booking[,c(1,15,16)],by.x = "destination",by.y = "srch_destination_id",all.x = TRUE)
View(statem.df2)
state.df2=statem.df2[,1:3]
rm(state.df2)
state.df2=statem.df2[,1:3]
rm(statem.df2)
state.df3=merge(state.df2,data_booking[,c(1,15,16)],by.x = "destination",by.y = "srch_destination_name",all.x = TRUE)
View(state.df2)
View(state.df1)
state.df1$long<-as.factor(state.df1$long)
state.df1$lat<-as.factor(state.df1$lat)
state.df1$name<-as.factor(state.df1$name)
agg.list <- list(state.df1$long, state.df1$lat,state.df1$name)
state.count<-aggregate(state.df1[,4], by = agg.list, sum)
View(state.count)
rm(state.df2)
state.count1<-data.frame(long=state.count$Group.1,lat=state.count$Group.2,number=as.numeric(state.count$x),name=state.count$Group.3)
state.count1<-data.frame(long=state.count$Group.1,lat=state.count$Group.2,number=as.numeric(state.count$x),name=state.count$Group.3)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(state.count1, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~number, colors = "Reds", hoverinfo = "text",
text = ~paste(state.count1$name, "<br />", state.count1$number)
) %>%
layout(title = 'Expedia records by city<br>(Hover for breakdown)', geo = g)
p
p
View(state.df)
View(state.df)
data_booking$user_location_region
head(state.count1)
head(data_booking)
rm(index,index_fal,index_fri,index_spr,index_sum,index_tem,index_ter,index_win,lati,month)
data.cloud <- merge(state.count1,data_booking, by.x="lat", by.y="srch_destination_latitude",all.x=T)
non.na.index<-rowSums(is.na(data.cloud))==0
data.cloud<-data.cloud[non.na.index,]
data.cloud1<-data.cloud[,c(3,4,21,22)]
### season
### 3-5 - spring; 6-8 - summer ; 9-11 - fall ; 12-2 - winter
month<-as.numeric(substr(data_booking$srch_ci,6,7))
index_spr<- 3 <= month & month <= 5
data_booking$season<-NULL
data_booking$season[index_spr]<-"spring"
index_sum<- 6 <= month & month <= 8
data_booking$season[index_sum]="summer"
index_fal<- 9 <= month & month <= 11
data_booking$season[index_fal]="fall"
index_win<- 12 == month & month <= 2
data_booking$season[index_win]="winter"
### climatic zone
### Torridzoneï¼ 0 - 23.5(absolute value) ;
### Temperate zones: 23.5 - 66.5;
### Frigid zones: 66.5 - 90.
lati<-abs(as.numeric(data_booking$user_location_latitude))
index_ter<- 0 <= lati & lati <= 23.5
data_booking$zone<-NULL
data_booking$zone[index_ter]<-"Torridzone"
index_tem<- 23.5 <= lati & lati <= 66.5
data_booking$zone[index_tem]="Temperate"
index_fri<- 66.5 <= lati & lati <= 90
data_booking$zone[index_fri]="Frigid"
head(state.count1)
head(data_booking)
rm(index,index_fal,index_fri,index_spr,index_sum,index_tem,index_ter,index_win,lati,month)
data.cloud <- merge(state.count1,data_booking, by.x="lat", by.y="srch_destination_latitude",all.x=T)
non.na.index<-rowSums(is.na(data.cloud))==0
data.cloud<-data.cloud[non.na.index,]
data.cloud1<-data.cloud[,c(3,4,21,22)]
head(state.count1)
head(data_booking)
rm(index,index_fal,index_fri,index_spr,index_sum,index_tem,index_ter,index_win,lati,month)
data.cloud <- merge(state.count1,data_booking, by.x="lat", by.y="srch_destination_latitude",all.x=T)
non.na.index<-rowSums(is.na(data.cloud))==0
data.cloud<-data.cloud[non.na.index,]
data.cloud1<-data.cloud[,c(3,4,21,22)]
state.count1<-data.frame(long=state.count$Group.1,lat=state.count$Group.2,number=as.numeric(state.count$x),name=state.count$Group.3)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p <- plot_geo(state.count1, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~long, y = ~lat, size = ~number, colors = "Reds", hoverinfo = "text",
text = ~paste(state.count1$name, "<br />", state.count1$number)
) %>%
layout(title = 'Expedia records by city<br>(Hover for breakdown)', geo = g)
#p
### season
### 3-5 - spring; 6-8 - summer ; 9-11 - fall ; 12-2 - winter
month<-as.numeric(substr(data_booking$srch_ci,6,7))
index_spr<- 3 <= month & month <= 5
data_booking$season<-NULL
data_booking$season[index_spr]<-"spring"
index_sum<- 6 <= month & month <= 8
data_booking$season[index_sum]="summer"
index_fal<- 9 <= month & month <= 11
data_booking$season[index_fal]="fall"
index_win<- 12 == month & month <= 2
data_booking$season[index_win]="winter"
### climatic zone
### Torridzoneï¼ 0 - 23.5(absolute value) ;
### Temperate zones: 23.5 - 66.5;
### Frigid zones: 66.5 - 90.
lati<-abs(as.numeric(data_booking$user_location_latitude))
index_ter<- 0 <= lati & lati <= 23.5
data_booking$zone<-NULL
data_booking$zone[index_ter]<-"Torridzone"
index_tem<- 23.5 <= lati & lati <= 66.5
data_booking$zone[index_tem]="Temperate"
index_fri<- 66.5 <= lati & lati <= 90
data_booking$zone[index_fri]="Frigid"
month<-as.numeric(substr(data_booking$srch_ci,6,7))
index_spr<- 3 <= month & month <= 5
data_booking$season<-NULL
data_booking$season[index_spr]<-"spring"
index_sum<- 6 <= month & month <= 8
data_booking$season[index_sum]="summer"
index_fal<- 9 <= month & month <= 11
data_booking$season[index_fal]="fall"
index_win<- 12 == month & month <= 2
data_booking$season[index_win]="winter"
lati<-abs(as.numeric(data_booking$user_location_latitude))
index_ter<- 0 <= lati & lati <= 23.5
data_booking$zone<-NULL
lati<-abs(as.numeric(data_booking$user_location_latitude))
index_ter<- 0 <= lati & lati <= 23.5
data_booking$zone<-NULL
data_booking$zone[index_ter]<-"Torridzone"
index_tem<- 23.5 <= lati & lati <= 66.5
data_booking$zone[index_tem]="Temperate"
index_fri<- 66.5 <= lati & lati <= 90
data_booking$zone[index_fri]="Frigid"
head(state.count1)
head(state.count1)
head(data_booking)
rm(index,index_fal,index_fri,index_spr,index_sum,index_tem,index_ter,index_win,lati,month)
data.cloud <- merge(state.count1,data_booking, by.x="lat", by.y="srch_destination_latitude",all.x=T)
data.cloud <- merge(state.count1,data_booking, by.x="lat", by.y="srch_destination_latitude",all.x=T)
non.na.index<-rowSums(is.na(data.cloud))==0
data.cloud<-data.cloud[non.na.index,]
data.cloud1<-data.cloud[,c(3,4,21,22)]
View(data.cloud)
data.cloud1<-data.cloud[,c(3,4,20,21)]
dat1<-data.cloud1[data.cloud1$season == "summer" & data.cloud1$zone == "Torridzone",]
dat2<-data.cloud1[data.cloud1$season == "fall" & data.cloud1$zone == "Temperate",]
dat1<-dat1[!duplicated(dat1),]
dat2<-dat2[!duplicated(dat2),]
eWordcloud(dat1, namevar = ~name, datavar = ~number,size = c(600, 600),title = "summer & Torridzone",rotationRange = c(-20, 20))
library(dplyr)
library(plotly)
library(readr)
eWordcloud(dat1, namevar = ~name, datavar = ~number,size = c(600, 600),title = "summer & Torridzone",rotationRange = c(-20, 20))
View(dat1)
View(dat2)
library(Echarts)
??wWordCloud
??eWordCloud
library(recharts)
library(recharts)
eWordcloud(dat1, namevar = ~name, datavar = ~number,size = c(600, 600),title = "summer & Torridzone",rotationRange = c(-20, 20))
eWordcloud(dat2, namevar = ~name, datavar = ~number,size = c(600, 600),title = "fall & temperate",rotationRange = c(-20, 20))
### season
### 3-5 - spring; 6-8 - summer ; 9-11 - fall ; 12-2 - winter
month<-as.numeric(substr(data_booking$srch_ci,6,7))
index_spr<- 3 <= month & month <= 5
data_booking$season<-NULL
data_booking$season[index_spr]<-"spring"
index_sum<- 6 <= month & month <= 8
data_booking$season[index_sum]="summer"
index_fal<- 9 <= month & month <= 11
data_booking$season[index_fal]="fall"
index_win<- 12 == month & month <= 2
data_booking$season[index_win]="winter"
### climatic zone
### Torridzoneï¼ 0 - 23.5(absolute value) ;
### Temperate zones: 23.5 - 66.5;
### Frigid zones: 66.5 - 90.
lati<-abs(as.numeric(data_booking$user_location_latitude))
index_ter<- 0 <= lati & lati <= 23.5
data_booking$zone<-NULL
data_booking$zone[index_ter]<-"Torridzone"
index_tem<- 23.5 <= lati & lati <= 66.5
data_booking$zone[index_tem]="Temperate"
index_fri<- 66.5 <= lati & lati <= 90
data_booking$zone[index_fri]="Frigid"
View(data.cloud)
x=c(1,2,2,3,3,4,1,2,2)
duplicate(x)
duplicated(x)
x
?duplicated
